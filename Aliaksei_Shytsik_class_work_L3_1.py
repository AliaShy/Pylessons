# # Классная работа № 3.1 (23.09.2022)

# # Пример замены значений в листе:
# numbers = [10, 5, 7, 2, 1]  # Задаем значения для исходного листа.
# print("Original list content:", numbers)

# numbers[0] = 111  # Производим замену значения в листе numbers под индексом 0.
# print("New list content:" , numbers)  # Выводим новый лист.


# # Пример замены значений в листе:
# numbers = [10, 5, 7, 2, 1]  # Задаем значения для исходного листа.
# print("Original list content:", numbers)

# numbers[0] = 111  # Производим замену значения в листе numbers под индексом 0.
# print("Previous list content:" , numbers)  # Выводим новый лист.

# numbers[1] = numbers[4]  # Производим замену значения с индексом 1 на значение с индексом 4.
# print("New list content:", numbers)  # Выводим новый лист.


# # Пример замены значений в листе и определения его длины:
# numbers = [10, 5, 7, 2, 1]  # Задаем значения для исходного листа.
# print("Original list content:", numbers)

# numbers[0] = 111  # Производим замену значения в листе numbers под индексом 0.
# print("Previous list content:" , numbers)  # Выводим новый лист.

# numbers[1] = numbers[4]  # Производим замену значения с индексом 1 на значение с индексом 4.
# print("New list content:", numbers)  # Выводим новый лист.

# print("List lenth:", len(numbers))  # Выводим длину листа.


# # Пример замены значений в листе, определения его длины, удаления значений из листа:
# numbers = [10, 5, 7, 2, 1]  # Задаем значения для исходного листа.
# print("Original list content:", numbers)

# numbers[0] = 111  # Производим замену значения в листе numbers под индексом 0.
# print("Previous list content:" , numbers)  # Выводим новый лист.

# numbers[1] = numbers[4]  # Производим замену значения с индексом 1 на значение с индексом 4.
# print("New list content:", numbers)  # Выводим новый лист.

# print("List lenth:", len(numbers))  # Выводим длину листа.

# del numbers[1]  # Удаляем значение с индексом 1 (второе в списке).
# print("New list lenth:", len(numbers))  # Выводим длину листа.
# print("New list content:", numbers)  # Выводим содержимое листа.


# # Демонстрация возможности использования отрицательных значений для обращений к элекментам списка.
# numbers = [111, 7, 2, 1]
# print(numbers[-1])  # Выведет 1.
# print(numbers[-2])  # Выведет 2.


# # Пример использования методов:
# numbers = [111, 7, 2, 1]
# print(len(numbers))
# print(numbers)

# numbers.append(4)  # Добавляем в конец листа значение 4.
# print(len(numbers))  # Выводим длину листа (будет 5 с учетом добавления в конец значения 4).
# print(numbers)  # Выводим весь лист.

# numbers.insert(0, 222)  # Вставляем значение 222 на место нулевого индекса, весь лист сдвигается вправо.
# print(len(numbers))  # Выводим длину листа (будет 6).
# print(numbers)  # Выводим весь лист.


# # Пример вставки значений в пустой лист:
# my_list = []  # Создаем пустой лист.

# for i in range(5):  # Задаем условие выполнения цикла.
#     my_list.append(i + 1)  # Добавляем в конец листа значение переменной i.
#     print(my_list)  # Выводим содержимое листа.
#     print("len = ", my_list)  # Выводим длину листа.

# print()
# print(my_list)  # Выводим весь лист после выхода из цикла.


# # Пример подсчета суммы значений в листе (1 способ):
# my_list = [10, 1, 8, 3, 5]
# total = 0  # Определяем переменную, которой передадим сумму значений в листе, присваиваем ей 0.

# for i in range(len(my_list)):  # Задаем условие выполнения цикла, пока не закончатся значения в листе.
#     total += my_list[i]  # Суммируем значение в листе.

# print(total)  # По выходу из цикла выводим итоговое значение.


# # Пример подсчета суммы значений в листе (2 способ):
# my_list = [10, 1, 8, 3, 5]
# total = 0  # Определяем переменную, которой передадим сумму значений в листе, присваиваем ей 0.

# for i in my_list:  # Задаем условие выполнения цикла - для всего листа.
#     total += i  # Суммируем значение в листе.

# print(total)  # По выходу из цикла выводим итоговое значение.


# # Примеры работы с переменными:
# # Способ 1 (приравнивание):
# variable_1 = 1
# variable_2 = 2

# variable_2 = variable_1
# variable_1 = variable_2
# print(variable_1, variable_2)
# print()

# # Способ 2 (передача значений с использованием временной переменной):
# variable_1 = 1
# variable_2 = 2

# auxiliary = variable_1
# variable_1 = variable_2
# variable_2 = auxiliary
# print(variable_1, variable_2)
# print()

# # Способ 3 (передача значений с использованием группой):
# variable_1 = 1
# variable_2 = 2

# variable_1, variable_2 = variable_2, variable_1
# print(variable_1, variable_2)


# # Пример перестановки значений в листе:
# my_list = [10, 1, 8, 3, 5]

# my_list[0], my_list[4] = my_list[4], my_list[0]  # Переменная с индексом 0 получает значение переменной с индексом 4, а та, в свою очередь - значение переменной с индексом 0.
# my_list[1], my_list[3] = my_list[3], my_list[1]  # Переменная с индексом 1 получает значение переменной с индексом 3, а та, в свою очередь - значение переменной с индексом 1.

# print(my_list)


# # Пример перестановки значений в листе с использованием цикла:
# my_list = [10, 1, 8, 3, 5]
# lenth = len(my_list)

# for i in range(lenth // 2):
#     my_list[i], my_list[lenth - i - 1] = my_list[lenth - i - 1], my_list[i]

# print(my_list)


# # Пример удаления значения из листа.
# my_list = ["white", "purple", "blue", "yellow", "green"]
# print(len(my_list))

# del my_list[2]  # Удаляет значение с индексом 2 из листа.
# print(len(my_list))


# # В листе могут быть переменные разных типов.
# my_list = [1, None, True, "I'm a string", 256, 0]
# print(my_list)


# # Демонстрация удаления переменных и листа. 
# my_list = [1, 2, 3, 4]
# del my_list[2]  # Удаляет переменную с индексом 2 из листа.
# print(my_list)

# del my_list  # Удаляет весь лист.
# #print(my_list)  # Завершится ошибкой, т.к. my_list удален.


# # Так можно вывести все значения листа.
# my_list = ["white", "purple", "blue", "yellow", "green"]

# for color in my_list:
#     print(color)


# # Пример создания второго листа с использованием значений 1. 
# lst1 = [1, 2, 3, 4, 5]
# lst2 = []
# add = 0  # Счетчик устанавливается в 0.

# for number in lst1:  # Задаем условие выполнения цикла - для всех значений из первого листа.
#     add += number  # Увеличиваем счетчик на значение из первого листа.
#     lst2.append(add)  # Добавляем полученное значение в конец первого листа.
# print(lst2)  # По выходу из цикла печатаем второй лист.


# # Пример операций с переменными в листе.
# lst = [1, 2, 3, 4, 5]  # Создаем лист.
# lst.insert(1, 6)  # Вставляем 6 на место второго индекса (1, 6, 2, 3, 4, 5).
# del lst[0]  # Удаляем значение с индксом 0, т.е. 1.
# lst.append(1)  # Добавляем 1 в конец листа.

# print(lst)  # Вывод 6, 2, 3, 4, 5, 1.


# # Пример того, что лист может содержать другой лист.
# lst = [1, [2, 3], 4]
# print(lst[1])  # Выводит значение переменной с индексом 1.
# print(len(lst))  # Выводит длину листа.


# # Пример работы с листом.
# my_list = [1, None, True, 'I am a string', 256, 0]  # Создаем лист.
# print(my_list[3])  # Выводим значение с индексом 3 ('I am a string').
# print(my_list[-1])  # Выводим последнее значение листа (0).

# my_list[1] = '?'  # Заменяем переменную с индексом 1 на символ ?.
# print(my_list)

# my_list.insert(0, 'first')  # Вставляем "first" на место с нулевым индексом (в начало).
# my_list.append('last')  #  Вставляем "last" в конец списка.
# print(my_list)


# # Демонстрация метода пузырьковой сортировки.
# my_list = [8, 10, 6, 2, 4]
# print(my_list)
# swapped = True

# while swapped:  # Устанавливаем условие выполнения цикла while.
#     swapped = False  # Присваиваем переменной swapped значение False.
#     for i in range(len(my_list) - 1):  # Устанавливаем условие выполнения цикла for - для всех i от 0 до 4, т.е. для всех значений листа.
#         if my_list[i] > my_list[i + 1]:  # Если iтый элемент >  элемента i+1.
#             swapped = True  # Переменной присваивается значение true для продолжения выполнения цикла.
#             my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]  # Элементу i присваивается значение элемента i+1, а элементу i+1 - значение элемента i.

# print(my_list)  # По выходу из цикла выводим отсортированный список.


# # Сортировка числового списка с использованием метода:
# a = 3
# b = 1
# c = 2
# lst = [a, c, b]
# lst.sort()
# print(lst)


# # Сортировка строковых переменных с использованием метода:
# lst = ['D', 'F', 'A', 'Z']
# lst.sort()
# print(lst)


# # Пример использования метода sort:
# lst = [5, 3, 1, 2, 4]
# print(lst)
# lst.sort()
# print(lst)


# # Пример использования метода reverse:
# lst = [5, 3, 1, 2, 4]
# print(lst)
# lst.reverse()  # Метод переставляет значения в списке задом на перед (последнее - первое, предпоследнее - второе и т.д.).
# print(lst)


# # Метод reverse работает и со строковыми переменными:
# a = 'A'
# b = 'B'
# c = 'C'
# d = ' '
# lst = [a, b, c, d]
# lst.reverse()
# print(lst)


# # Пример приравнивания списков:
# list_1 = [1]  # Создаем список 1.
# list_2 = list_1  # Приравниваем список 1 и список 2. Такое приравнивание не копирует значения из списка 1, а копирует ссылки на них.
# print(list_1, list_2)  # Выводим списки.
# list_1[0] = 2  # Изменяем значение в списке 1.
# print(list_1, list_2)  # Значение в списке 2 также изменится.


# # Пример копирования списка целиком: 
# list_1 = [1]
# list_2 = list_1[:]  # Копируем все значения из первого списка во второй.
# print(list_1, list_2)
# list_1[0] = 2
# print(list_1, list_2)


# # Пример копирования части списка:
# my_list = [10, 8, 6, 4, 2]
# new_list = my_list[1:3]  # Копируем значения, начиная с первого индекса включительно и до 3 индекса не включая.
# print(new_list)


# # Пример копирования списка с отрицательным аргументом:
# my_list = [10, 8, 6, 4, 2]
# new_list = my_list[1:-1]  # Копируем значения от первого индекса включительно до -1 не включительно, т.е. 8, 6, 4.
# print(new_list)


# # Пример, в котором список будет пуст: 
# my_list = [10, 8, 6, 4, 2]
# new_list = my_list[-1:1]
# print(new_list)


# # Пример, в котором первый аргумент опущен:
# my_list = [10, 8, 6, 4, 2]
# new_list = my_list[:3]  # Указываем только индекс последнего значения, копирование будет начиная с 0 индекса.
# print(new_list)


# # Пример, в котором второй аргумент опущен:
# my_list = [10, 8, 6, 4, 2]
# new_list = my_list[3:]  # Указываем только индекс стартового значения, копирование будет до конца списка.
# print(new_list)


# # Пример копирования всех значений списка:
# my_list = [10, 8, 6, 4, 2]
# new_list = my_list[:]  # Копируем все значения списка.
# print(new_list)


# # Пример удаления отдельных значений списка:
# my_list = [10, 8, 6, 4, 2]
# del my_list[1:3]  # Удаляем значения, начиная с 1 индекса включительно и заканчивая 3 не включительно.
# print(my_list)


# # Пример удаления всех значений списка:
# my_list = [10, 8, 6, 4, 2]
# del my_list[:]  # Удаляем все значения списка.
# print(my_list)


# # Пример удаления списка:
# my_list = [10, 8, 6, 4, 2]
# del my_list  # Удаляем список.
# print(my_list)


# # Пример использования операторов in и not in в списках:
# my_list = [0, 3, 12, 8, 2]
# print(5 in my_list)  # Результат False, поскольку 5 отсутствует в списке.
# print(5 not in my_list)  # Результат True, поскольку 5 отсутствует в списке.
# print(12 in my_list)  # Результат True, поскольку 12 присутствует в списке.


# # Скрипт для поиска максимального числа в списке:
# my_list = [17, 3, 11, 5, 1, 9, 7, 15, 13]
# largest = my_list[0]  # Передаем переменной largest значение под индексом 0 в списке.

# for i in range(1, len(my_list)):  # Условие выполнения цикла - для всех значений в списке.
#     if my_list[i] > largest:  # Устанавливаем условие - если элемент с индексом i больше переменной largest.
#         largest = my_list[i]  # Присваиваем переменной largest значение элемента с индексом i.
# print(largest)


# # Еще один скрипт для поиска максимального числа в списке:
# my_list = [17, 3, 11, 5, 1, 9, 7, 15, 13]
# largest = my_list[0]  # Передаем переменной largest значение под индексом 0 в списке.

# for i in my_list:  # Условие выполнения цикла - для всех значений в списке.
#     if i > largest:  # Устанавливаем условие - если элемент с индексом i больше переменной largest.
#         largest = i  # Присваиваем переменной largest значение элемента с индексом i.
# print(largest)


# # Еще один скрипт для поиска максимального числа в списке:
# my_list = [17, 3, 11, 5, 1, 9, 7, 15, 13]
# largest = my_list[0]  # Передаем переменной largest значение под индексом 0 в списке.

# for i in my_list[1:]:  # Условие выполнения цикла - для всех значений в списке.
#     if i > largest:  # Устанавливаем условие - если элемент с индексом i больше переменной largest.
#         largest = i  # Присваиваем переменной largest значение элемента с индексом i.
# print(largest)


# # Поиск в списке элемента с определенным значением:
# my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# to_find = 5  # Значение для поиска.
# found = False  # Присваиваем переменной found значение False, которое будем использовать для выхода из цикла.

# for i in range(len(my_list)):  # Задаем условие для поиска.
#     found = my_list[i] == to_find   # В случае, если совпадение будет найдено, переменная found получит значение True.
#     if found:
#         break
# if found:
#     print("Element found at index", i)
# else:
#     print("absent")


# # Поиск количества совпадений в двух списках:
# drawn = [5, 11, 9, 42, 3, 49]
# bets = [3, 7, 11, 42, 34, 49]
# hits = 0
# for number in bets:  # Условие выполнения цикла for - для всех значений списка bets.
#     if number in drawn:  # Если значение из bets будет найдено в drawn.
#         hits += 1  # Счетчик увеличивается на 1.
# print(hits)


# # Еще пример приравнивания списков.
# vehicles_one = ['car', 'bicycle', 'motor']
# print(vehicles_one)
# vehicles_two = vehicles_one
# del vehicles_one[0]  # Удаляем значение с индексом 0.
# print(vehicles_two)  # Вывод: 'bicycle', 'motor'.


# # Пример копирования элементов списка.
# colors = ['red', 'green', 'orange']
# copy_whole_colors = colors[:]  # Копирует все элементы списка.
# copy_part_colors = colors[0:2]  # Копирует элементы с 0 включительно до 2 не включительно индекса.
# print(copy_whole_colors, copy_part_colors)


# # Пример работы со значениями в списке.
# my_list = [1, 2, 3, 4, 5]
# slice_one = my_list[2: ]  # Переменная получает значения списка, начиная с2 индекса включительно: 3, 4, 5.
# slice_two = my_list[ :2]  # Переменная получает значения списка с 0 включительно до 2 не включительно индекса: 1, 2. 
# slice_three = my_list[-2: ]  # Переменная получает значения списка: 4, 5.
# print(slice_one)
# print(slice_two)
# print(slice_three)


# # Пример работы со значениями в списке.
# my_list = [1, 2, 3, 4, 5]
# del my_list[0:2]  # Удаляет значения с 0 включительно до 2 не включительно индекса.
# print(my_list)

# del my_list[:]  # Удаляет все значения из списка.
# print(my_list)


# # Пример работы со строковыми значениями в списке.
# sample_list = ["A", "B", "C", "D", "E"]
# new_list = sample_list[2:-1]  # Выводим все элементы с 2 индкса включительно до 4 не включительно: 'C', 'D'.
# print(new_list)


# # Пример работы операторов in/not in.
# my_list = ["A", "B", 1, 2]
# print("A" in my_list)  # False.
# print("C" not in my_list)  # True.
# print(2 not in my_list)  # False.


# # Пример приравнивания списков.
# list_1 = ["A", "B", "C"]
# list_2 = list_1
# list_3 = list_2
# del list_1[0]  # В списке 1 удаляем значение с индексом 0, т.е. A.
# del list_2[0]  # В списке 2 удаляем значение с индексом 0, т.е. теперь уже B.

# print(list_3)  # Список 3 будет содержать только С, поскольку в него мы передали не значения списка 2, а ссылки на них.


# # Пример приравнивания списков.
# list_1 = ["A", "B", "C"]
# list_2 = list_1
# list_3 = list_2
# del list_1[0]  # В списке 1 удаляем значение с индексом 0, т.е. A.
# del list_2  # Удаляем список 2.

# print(list_3)  # Список 3 будет содержать только В, С, поскольку в него мы передали не значения списка 2, а ссылки на них.


# # Пример приравнивания значений списков.
# list_1 = ["A", "B", "C"]
# list_2 = list_1[:]  # Передаем все значения списка 1 списку 2.
# list_3 = list_2[:]  # передаем все значения списка 2 списку 3.
# del list_1[0]  # В списке 1 удаляем значение с индексом 0, т.е. A.
# del list_2[0]  # В списке 1 удаляем значение с индексом 0, т.е. тоже A.

# print(list_3)  # Список 3 будет содержать A, В, C. Удаление в списках 1, 2 никак не повлияло, поскольку списку 3 мы передали сами значения.


# # Пример работы с операторами in/not in.
# my_list = [1, 2, "in", True, "ABC"]

# print(1 in my_list)  # True.
# print("A" not in my_list)  # True.
# print(3 not in my_list)  # True.
# print(False in my_list)  # False.


# # Пример приравнивания списков.
# list_1 = ["A", "B", "C"]
# list_2 = list_1
# list_3 = list_2
# del list_1[0]  # В списке 1 удаляем значение с индексом 0, т.е. A.
# del list_2[:]  # В списке 2 Удаляем все значения.

# print(list_3)  # Список 3 будет пустым.
